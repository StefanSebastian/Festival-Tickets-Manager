// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FestivalProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from FestivalProtocol.proto</summary>
  public static partial class FestivalProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for FestivalProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FestivalProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZGZXN0aXZhbFByb3RvY29sLnByb3RvEghwcm90b2J1ZiIkCgRVc2VyEgoK",
            "AmlkGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJIiIKBkFydGlzdBIKCgJpZBgB",
            "IAEoBRIMCgRuYW1lGAIgASgJIoMBCgRTaG93EgoKAmlkGAEgASgFEhAKCGxv",
            "Y2F0aW9uGAIgASgJEgwKBGRhdGUYAyABKAkSGAoQdGlja2V0c0F2YWlsYWJs",
            "ZRgEIAEoBRITCgt0aWNrZXRzU29sZBgFIAEoBRIgCgZhcnRpc3QYBiABKAsy",
            "EC5wcm90b2J1Zi5BcnRpc3QiZAoLVHJhbnNhY3Rpb24SCgoCaWQYASABKAUS",
            "EgoKY2xpZW50TmFtZRgCIAEoCRIXCg9udW1iZXJPZlRpY2tldHMYAyABKAUS",
            "HAoEc2hvdxgEIAEoCzIOLnByb3RvYnVmLlNob3ciwAIKD0Zlc3RpdmFsUmVx",
            "dWVzdBIsCgR0eXBlGAEgASgOMh4ucHJvdG9idWYuRmVzdGl2YWxSZXF1ZXN0",
            "LlR5cGUSEAoIaWRBcnRpc3QYAiABKAUSDAoEZGF0ZRgDIAEoCRIcCgR1c2Vy",
            "GAQgASgLMg4ucHJvdG9idWYuVXNlchIOCgZpZFNob3cYBSABKAUSEgoKY2xp",
            "ZW50TmFtZRgGIAEoCRITCgtuck9mVGlja2V0cxgHIAEoBRIQCgh1c2VybmFt",
            "ZRgIIAEoCSJ2CgRUeXBlEgsKB1Vua25vd24QABIJCgVMb2dpbhABEgoKBkxv",
            "Z291dBACEg4KCkdldEFydGlzdHMQAxITCg9HZXRTaG93c0ZvckRhdGUQBBIV",
            "ChFHZXRTaG93c0ZvckFydGlzdBAFEg4KCkJ1eVRpY2tldHMQBiLLAQoQRmVz",
            "dGl2YWxSZXNwb25zZRItCgR0eXBlGAEgASgOMh8ucHJvdG9idWYuRmVzdGl2",
            "YWxSZXNwb25zZS5UeXBlEg0KBWVycm9yGAIgASgJEiEKB2FydGlzdHMYAyAD",
            "KAsyEC5wcm90b2J1Zi5BcnRpc3QSHQoFc2hvd3MYBCADKAsyDi5wcm90b2J1",
            "Zi5TaG93IjcKBFR5cGUSCwoHVW5rbm93bhAAEgYKAk9rEAESCQoFRXJyb3IQ",
            "AhIPCgtTaG93VXBkYXRlZBADQguqAghQcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.User), global::Protobuf.User.Parser, new[]{ "Id", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Artist), global::Protobuf.Artist.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Show), global::Protobuf.Show.Parser, new[]{ "Id", "Location", "Date", "TicketsAvailable", "TicketsSold", "Artist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Transaction), global::Protobuf.Transaction.Parser, new[]{ "Id", "ClientName", "NumberOfTickets", "Show" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.FestivalRequest), global::Protobuf.FestivalRequest.Parser, new[]{ "Type", "IdArtist", "Date", "User", "IdShow", "ClientName", "NrOfTickets", "Username" }, null, new[]{ typeof(global::Protobuf.FestivalRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.FestivalResponse), global::Protobuf.FestivalResponse.Parser, new[]{ "Type", "Error", "Artists", "Shows" }, null, new[]{ typeof(global::Protobuf.FestivalResponse.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.FestivalProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Artist : pb::IMessage<Artist> {
    private static readonly pb::MessageParser<Artist> _parser = new pb::MessageParser<Artist>(() => new Artist());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.FestivalProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist(Artist other) : this() {
      id_ = other.id_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist Clone() {
      return new Artist(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artist other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Show : pb::IMessage<Show> {
    private static readonly pb::MessageParser<Show> _parser = new pb::MessageParser<Show>(() => new Show());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Show> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.FestivalProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show(Show other) : this() {
      id_ = other.id_;
      location_ = other.location_;
      date_ = other.date_;
      ticketsAvailable_ = other.ticketsAvailable_;
      ticketsSold_ = other.ticketsSold_;
      Artist = other.artist_ != null ? other.Artist.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show Clone() {
      return new Show(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 3;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketsAvailable" field.</summary>
    public const int TicketsAvailableFieldNumber = 4;
    private int ticketsAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TicketsAvailable {
      get { return ticketsAvailable_; }
      set {
        ticketsAvailable_ = value;
      }
    }

    /// <summary>Field number for the "ticketsSold" field.</summary>
    public const int TicketsSoldFieldNumber = 5;
    private int ticketsSold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TicketsSold {
      get { return ticketsSold_; }
      set {
        ticketsSold_ = value;
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 6;
    private global::Protobuf.Artist artist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Artist Artist {
      get { return artist_; }
      set {
        artist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Show);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Show other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Location != other.Location) return false;
      if (Date != other.Date) return false;
      if (TicketsAvailable != other.TicketsAvailable) return false;
      if (TicketsSold != other.TicketsSold) return false;
      if (!object.Equals(Artist, other.Artist)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (TicketsAvailable != 0) hash ^= TicketsAvailable.GetHashCode();
      if (TicketsSold != 0) hash ^= TicketsSold.GetHashCode();
      if (artist_ != null) hash ^= Artist.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Location);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Date);
      }
      if (TicketsAvailable != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TicketsAvailable);
      }
      if (TicketsSold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TicketsSold);
      }
      if (artist_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Artist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (TicketsAvailable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketsAvailable);
      }
      if (TicketsSold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketsSold);
      }
      if (artist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Show other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.TicketsAvailable != 0) {
        TicketsAvailable = other.TicketsAvailable;
      }
      if (other.TicketsSold != 0) {
        TicketsSold = other.TicketsSold;
      }
      if (other.artist_ != null) {
        if (artist_ == null) {
          artist_ = new global::Protobuf.Artist();
        }
        Artist.MergeFrom(other.Artist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Location = input.ReadString();
            break;
          }
          case 26: {
            Date = input.ReadString();
            break;
          }
          case 32: {
            TicketsAvailable = input.ReadInt32();
            break;
          }
          case 40: {
            TicketsSold = input.ReadInt32();
            break;
          }
          case 50: {
            if (artist_ == null) {
              artist_ = new global::Protobuf.Artist();
            }
            input.ReadMessage(artist_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.FestivalProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      id_ = other.id_;
      clientName_ = other.clientName_;
      numberOfTickets_ = other.numberOfTickets_;
      Show = other.show_ != null ? other.Show.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "clientName" field.</summary>
    public const int ClientNameFieldNumber = 2;
    private string clientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numberOfTickets" field.</summary>
    public const int NumberOfTicketsFieldNumber = 3;
    private int numberOfTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfTickets {
      get { return numberOfTickets_; }
      set {
        numberOfTickets_ = value;
      }
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 4;
    private global::Protobuf.Show show_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Show Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ClientName != other.ClientName) return false;
      if (NumberOfTickets != other.NumberOfTickets) return false;
      if (!object.Equals(Show, other.Show)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (NumberOfTickets != 0) hash ^= NumberOfTickets.GetHashCode();
      if (show_ != null) hash ^= Show.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientName);
      }
      if (NumberOfTickets != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumberOfTickets);
      }
      if (show_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Show);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (NumberOfTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfTickets);
      }
      if (show_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Show);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      if (other.NumberOfTickets != 0) {
        NumberOfTickets = other.NumberOfTickets;
      }
      if (other.show_ != null) {
        if (show_ == null) {
          show_ = new global::Protobuf.Show();
        }
        Show.MergeFrom(other.Show);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ClientName = input.ReadString();
            break;
          }
          case 24: {
            NumberOfTickets = input.ReadInt32();
            break;
          }
          case 34: {
            if (show_ == null) {
              show_ = new global::Protobuf.Show();
            }
            input.ReadMessage(show_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FestivalRequest : pb::IMessage<FestivalRequest> {
    private static readonly pb::MessageParser<FestivalRequest> _parser = new pb::MessageParser<FestivalRequest>(() => new FestivalRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FestivalRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.FestivalProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalRequest(FestivalRequest other) : this() {
      type_ = other.type_;
      idArtist_ = other.idArtist_;
      date_ = other.date_;
      User = other.user_ != null ? other.User.Clone() : null;
      idShow_ = other.idShow_;
      clientName_ = other.clientName_;
      nrOfTickets_ = other.nrOfTickets_;
      username_ = other.username_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalRequest Clone() {
      return new FestivalRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protobuf.FestivalRequest.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.FestivalRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "idArtist" field.</summary>
    public const int IdArtistFieldNumber = 2;
    private int idArtist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdArtist {
      get { return idArtist_; }
      set {
        idArtist_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 3;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private global::Protobuf.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "idShow" field.</summary>
    public const int IdShowFieldNumber = 5;
    private int idShow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdShow {
      get { return idShow_; }
      set {
        idShow_ = value;
      }
    }

    /// <summary>Field number for the "clientName" field.</summary>
    public const int ClientNameFieldNumber = 6;
    private string clientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nrOfTickets" field.</summary>
    public const int NrOfTicketsFieldNumber = 7;
    private int nrOfTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NrOfTickets {
      get { return nrOfTickets_; }
      set {
        nrOfTickets_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 8;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FestivalRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FestivalRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (IdArtist != other.IdArtist) return false;
      if (Date != other.Date) return false;
      if (!object.Equals(User, other.User)) return false;
      if (IdShow != other.IdShow) return false;
      if (ClientName != other.ClientName) return false;
      if (NrOfTickets != other.NrOfTickets) return false;
      if (Username != other.Username) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IdArtist != 0) hash ^= IdArtist.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (IdShow != 0) hash ^= IdShow.GetHashCode();
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (NrOfTickets != 0) hash ^= NrOfTickets.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (IdArtist != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IdArtist);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Date);
      }
      if (user_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(User);
      }
      if (IdShow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IdShow);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClientName);
      }
      if (NrOfTickets != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NrOfTickets);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Username);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (IdArtist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdArtist);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (IdShow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdShow);
      }
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (NrOfTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NrOfTickets);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FestivalRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IdArtist != 0) {
        IdArtist = other.IdArtist;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Protobuf.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.IdShow != 0) {
        IdShow = other.IdShow;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      if (other.NrOfTickets != 0) {
        NrOfTickets = other.NrOfTickets;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Protobuf.FestivalRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            IdArtist = input.ReadInt32();
            break;
          }
          case 26: {
            Date = input.ReadString();
            break;
          }
          case 34: {
            if (user_ == null) {
              user_ = new global::Protobuf.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 40: {
            IdShow = input.ReadInt32();
            break;
          }
          case 50: {
            ClientName = input.ReadString();
            break;
          }
          case 56: {
            NrOfTickets = input.ReadInt32();
            break;
          }
          case 66: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FestivalRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Logout")] Logout = 2,
        [pbr::OriginalName("GetArtists")] GetArtists = 3,
        [pbr::OriginalName("GetShowsForDate")] GetShowsForDate = 4,
        [pbr::OriginalName("GetShowsForArtist")] GetShowsForArtist = 5,
        [pbr::OriginalName("BuyTickets")] BuyTickets = 6,
      }

    }
    #endregion

  }

  public sealed partial class FestivalResponse : pb::IMessage<FestivalResponse> {
    private static readonly pb::MessageParser<FestivalResponse> _parser = new pb::MessageParser<FestivalResponse>(() => new FestivalResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FestivalResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.FestivalProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalResponse(FestivalResponse other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      artists_ = other.artists_.Clone();
      shows_ = other.shows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalResponse Clone() {
      return new FestivalResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protobuf.FestivalResponse.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.FestivalResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artists" field.</summary>
    public const int ArtistsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protobuf.Artist> _repeated_artists_codec
        = pb::FieldCodec.ForMessage(26, global::Protobuf.Artist.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Artist> artists_ = new pbc::RepeatedField<global::Protobuf.Artist>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Artist> Artists {
      get { return artists_; }
    }

    /// <summary>Field number for the "shows" field.</summary>
    public const int ShowsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protobuf.Show> _repeated_shows_codec
        = pb::FieldCodec.ForMessage(34, global::Protobuf.Show.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Show> shows_ = new pbc::RepeatedField<global::Protobuf.Show>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Show> Shows {
      get { return shows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FestivalResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FestivalResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if(!artists_.Equals(other.artists_)) return false;
      if(!shows_.Equals(other.shows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= artists_.GetHashCode();
      hash ^= shows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      artists_.WriteTo(output, _repeated_artists_codec);
      shows_.WriteTo(output, _repeated_shows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += artists_.CalculateSize(_repeated_artists_codec);
      size += shows_.CalculateSize(_repeated_shows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FestivalResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      artists_.Add(other.artists_);
      shows_.Add(other.shows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Protobuf.FestivalResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            artists_.AddEntriesFrom(input, _repeated_artists_codec);
            break;
          }
          case 34: {
            shows_.AddEntriesFrom(input, _repeated_shows_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FestivalResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Ok")] Ok = 1,
        [pbr::OriginalName("Error")] Error = 2,
        [pbr::OriginalName("ShowUpdated")] ShowUpdated = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
